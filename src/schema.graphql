type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]
    comments: [Comment!]
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type Mutation {
    # User
    createUser( data: CreateUserInput! ): AuthPayload!
    login( data: LoginInput ): AuthPayload!
    updateUser( data: UpdateUserInput! ): User!
    deleteUser: User!

    # Post
    createPost( data: CreatePostInput! ): Post!
    updatePost( id: ID!, data: UpdatePostInput! ): Post!
    deletePost(id: ID!): Post!

    # Comment
    createComment( data: CreateCommentInput! ): Comment!
    updateComment( id: ID!, data: UpdateCommentInput! ): Comment!
    deleteComment(id: ID!): Comment!
}

input LoginInput {
    email: String!
    password: String!
}

type AuthPayload {
    user: User!
    token: String!
}

enum SubscriptionMutationType {
    CREATED UPDATED DELETED
}

type Subscription {
    post: PostSubscriptionPayload!
    comment(data: SubscribeToCommentInput): CommentSubscriptionPayload!
}

input SubscribeToCommentInput {
    postId: ID
    mutationIn: [SubscriptionMutationType]
}

type PostSubscriptionPayload {
    mutation: SubscriptionMutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: SubscriptionMutationType!
    node: Comment
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    post: ID!
    text: String!
}

input UpdateCommentInput { text: String }

type Query {
    users(query: String): [ User! ] !
    user(data: GetUserInput): User!
    post(data: GetPostInput): Post!
    posts(query: String): [ Post! ] !
    comments: [Comment!]!
}

input GetUserInput { email: String! }
input GetPostInput { id: String! }
