type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]
    comments: [Comment!]
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type Mutation {
    createUser( input: CreateUserInput! ): User!
    updateUser( id: ID!, input: UpdateUserInput! ): User!
    deleteUser(id: ID!): User!
    createPost( input: CreatePostInput! ): Post!
    updatePost( id: ID!, input: UpdatePostInput! ): Post!
    deletePost(id: ID!): Post!
    createComment( input: CreateCommentInput! ): Comment!
    updateComment( id: ID!, input: UpdateCommentInput! ): Comment!
    deleteComment(id: ID!): Comment!
}

type Subscription {
    post: PostSubscriptionPayload!
    comment(postId: ID!): CommentSubscriptionPayload!
}

type PostSubscriptionPayload {
    mutation: String!
    data: Post!
}

type CommentSubscriptionPayload {
    mutation: String!
    data: Comment!
}

input CreateUserInput {
    name: String!
    email: String!
    age: Int 
}

input UpdateUserInput {
    name: String
    email: String
    age: Int 
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    author: ID!
    post: ID!
    text: String! 
}

input UpdateCommentInput {
    text: String
}

type Query {
    users(query: String): [ User! ] !
    currentUser: User!
    post: Post!
    posts(query: String): [ Post! ] !
    comments: [Comment!]!
}